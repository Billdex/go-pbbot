// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: onebot_event.proto

package onebot

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PrivateMessageEvent struct {
	Time                 int64                       `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	SelfId               int64                       `protobuf:"varint,2,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	PostType             string                      `protobuf:"bytes,3,opt,name=post_type,json=postType,proto3" json:"post_type,omitempty"`
	MessageType          string                      `protobuf:"bytes,4,opt,name=message_type,json=messageType,proto3" json:"message_type,omitempty"`
	SubType              string                      `protobuf:"bytes,5,opt,name=sub_type,json=subType,proto3" json:"sub_type,omitempty"`
	MessageId            int32                       `protobuf:"varint,6,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	UserId               int64                       `protobuf:"varint,7,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Message              []*Message                  `protobuf:"bytes,8,rep,name=message,proto3" json:"message,omitempty"`
	RawMessage           string                      `protobuf:"bytes,9,opt,name=raw_message,json=rawMessage,proto3" json:"raw_message,omitempty"`
	Font                 int32                       `protobuf:"varint,10,opt,name=font,proto3" json:"font,omitempty"`
	Sender               *PrivateMessageEvent_Sender `protobuf:"bytes,11,opt,name=sender,proto3" json:"sender,omitempty"`
	Extra                map[string]string           `protobuf:"bytes,255,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *PrivateMessageEvent) Reset()         { *m = PrivateMessageEvent{} }
func (m *PrivateMessageEvent) String() string { return proto.CompactTextString(m) }
func (*PrivateMessageEvent) ProtoMessage()    {}
func (*PrivateMessageEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b4afa4460e98c26, []int{0}
}
func (m *PrivateMessageEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrivateMessageEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrivateMessageEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrivateMessageEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivateMessageEvent.Merge(m, src)
}
func (m *PrivateMessageEvent) XXX_Size() int {
	return m.Size()
}
func (m *PrivateMessageEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivateMessageEvent.DiscardUnknown(m)
}

var xxx_messageInfo_PrivateMessageEvent proto.InternalMessageInfo

func (m *PrivateMessageEvent) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *PrivateMessageEvent) GetSelfId() int64 {
	if m != nil {
		return m.SelfId
	}
	return 0
}

func (m *PrivateMessageEvent) GetPostType() string {
	if m != nil {
		return m.PostType
	}
	return ""
}

func (m *PrivateMessageEvent) GetMessageType() string {
	if m != nil {
		return m.MessageType
	}
	return ""
}

func (m *PrivateMessageEvent) GetSubType() string {
	if m != nil {
		return m.SubType
	}
	return ""
}

func (m *PrivateMessageEvent) GetMessageId() int32 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *PrivateMessageEvent) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *PrivateMessageEvent) GetMessage() []*Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *PrivateMessageEvent) GetRawMessage() string {
	if m != nil {
		return m.RawMessage
	}
	return ""
}

func (m *PrivateMessageEvent) GetFont() int32 {
	if m != nil {
		return m.Font
	}
	return 0
}

func (m *PrivateMessageEvent) GetSender() *PrivateMessageEvent_Sender {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *PrivateMessageEvent) GetExtra() map[string]string {
	if m != nil {
		return m.Extra
	}
	return nil
}

type PrivateMessageEvent_Sender struct {
	UserId               int64    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Nickname             string   `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Sex                  string   `protobuf:"bytes,3,opt,name=sex,proto3" json:"sex,omitempty"`
	Age                  int32    `protobuf:"varint,4,opt,name=age,proto3" json:"age,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PrivateMessageEvent_Sender) Reset()         { *m = PrivateMessageEvent_Sender{} }
func (m *PrivateMessageEvent_Sender) String() string { return proto.CompactTextString(m) }
func (*PrivateMessageEvent_Sender) ProtoMessage()    {}
func (*PrivateMessageEvent_Sender) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b4afa4460e98c26, []int{0, 0}
}
func (m *PrivateMessageEvent_Sender) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PrivateMessageEvent_Sender) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PrivateMessageEvent_Sender.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PrivateMessageEvent_Sender) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PrivateMessageEvent_Sender.Merge(m, src)
}
func (m *PrivateMessageEvent_Sender) XXX_Size() int {
	return m.Size()
}
func (m *PrivateMessageEvent_Sender) XXX_DiscardUnknown() {
	xxx_messageInfo_PrivateMessageEvent_Sender.DiscardUnknown(m)
}

var xxx_messageInfo_PrivateMessageEvent_Sender proto.InternalMessageInfo

func (m *PrivateMessageEvent_Sender) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *PrivateMessageEvent_Sender) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *PrivateMessageEvent_Sender) GetSex() string {
	if m != nil {
		return m.Sex
	}
	return ""
}

func (m *PrivateMessageEvent_Sender) GetAge() int32 {
	if m != nil {
		return m.Age
	}
	return 0
}

type GroupMessageEvent struct {
	Time                 int64                        `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	SelfId               int64                        `protobuf:"varint,2,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	PostType             string                       `protobuf:"bytes,3,opt,name=post_type,json=postType,proto3" json:"post_type,omitempty"`
	MessageType          string                       `protobuf:"bytes,4,opt,name=message_type,json=messageType,proto3" json:"message_type,omitempty"`
	SubType              string                       `protobuf:"bytes,5,opt,name=sub_type,json=subType,proto3" json:"sub_type,omitempty"`
	MessageId            int32                        `protobuf:"varint,6,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	GroupId              int64                        `protobuf:"varint,7,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	UserId               int64                        `protobuf:"varint,8,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Anonymous            *GroupMessageEvent_Anonymous `protobuf:"bytes,9,opt,name=anonymous,proto3" json:"anonymous,omitempty"`
	Message              []*Message                   `protobuf:"bytes,10,rep,name=message,proto3" json:"message,omitempty"`
	RawMessage           string                       `protobuf:"bytes,11,opt,name=raw_message,json=rawMessage,proto3" json:"raw_message,omitempty"`
	Font                 int32                        `protobuf:"varint,12,opt,name=font,proto3" json:"font,omitempty"`
	Sender               *GroupMessageEvent_Sender    `protobuf:"bytes,13,opt,name=sender,proto3" json:"sender,omitempty"`
	Extra                map[string]string            `protobuf:"bytes,255,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *GroupMessageEvent) Reset()         { *m = GroupMessageEvent{} }
func (m *GroupMessageEvent) String() string { return proto.CompactTextString(m) }
func (*GroupMessageEvent) ProtoMessage()    {}
func (*GroupMessageEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b4afa4460e98c26, []int{1}
}
func (m *GroupMessageEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupMessageEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupMessageEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupMessageEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupMessageEvent.Merge(m, src)
}
func (m *GroupMessageEvent) XXX_Size() int {
	return m.Size()
}
func (m *GroupMessageEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupMessageEvent.DiscardUnknown(m)
}

var xxx_messageInfo_GroupMessageEvent proto.InternalMessageInfo

func (m *GroupMessageEvent) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *GroupMessageEvent) GetSelfId() int64 {
	if m != nil {
		return m.SelfId
	}
	return 0
}

func (m *GroupMessageEvent) GetPostType() string {
	if m != nil {
		return m.PostType
	}
	return ""
}

func (m *GroupMessageEvent) GetMessageType() string {
	if m != nil {
		return m.MessageType
	}
	return ""
}

func (m *GroupMessageEvent) GetSubType() string {
	if m != nil {
		return m.SubType
	}
	return ""
}

func (m *GroupMessageEvent) GetMessageId() int32 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *GroupMessageEvent) GetGroupId() int64 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *GroupMessageEvent) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GroupMessageEvent) GetAnonymous() *GroupMessageEvent_Anonymous {
	if m != nil {
		return m.Anonymous
	}
	return nil
}

func (m *GroupMessageEvent) GetMessage() []*Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *GroupMessageEvent) GetRawMessage() string {
	if m != nil {
		return m.RawMessage
	}
	return ""
}

func (m *GroupMessageEvent) GetFont() int32 {
	if m != nil {
		return m.Font
	}
	return 0
}

func (m *GroupMessageEvent) GetSender() *GroupMessageEvent_Sender {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *GroupMessageEvent) GetExtra() map[string]string {
	if m != nil {
		return m.Extra
	}
	return nil
}

type GroupMessageEvent_Anonymous struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Flag                 string   `protobuf:"bytes,3,opt,name=flag,proto3" json:"flag,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GroupMessageEvent_Anonymous) Reset()         { *m = GroupMessageEvent_Anonymous{} }
func (m *GroupMessageEvent_Anonymous) String() string { return proto.CompactTextString(m) }
func (*GroupMessageEvent_Anonymous) ProtoMessage()    {}
func (*GroupMessageEvent_Anonymous) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b4afa4460e98c26, []int{1, 0}
}
func (m *GroupMessageEvent_Anonymous) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupMessageEvent_Anonymous) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupMessageEvent_Anonymous.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupMessageEvent_Anonymous) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupMessageEvent_Anonymous.Merge(m, src)
}
func (m *GroupMessageEvent_Anonymous) XXX_Size() int {
	return m.Size()
}
func (m *GroupMessageEvent_Anonymous) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupMessageEvent_Anonymous.DiscardUnknown(m)
}

var xxx_messageInfo_GroupMessageEvent_Anonymous proto.InternalMessageInfo

func (m *GroupMessageEvent_Anonymous) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *GroupMessageEvent_Anonymous) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GroupMessageEvent_Anonymous) GetFlag() string {
	if m != nil {
		return m.Flag
	}
	return ""
}

type GroupMessageEvent_Sender struct {
	UserId               int64    `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Nickname             string   `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Card                 string   `protobuf:"bytes,3,opt,name=card,proto3" json:"card,omitempty"`
	Sex                  string   `protobuf:"bytes,4,opt,name=sex,proto3" json:"sex,omitempty"`
	Age                  int32    `protobuf:"varint,5,opt,name=age,proto3" json:"age,omitempty"`
	Area                 string   `protobuf:"bytes,6,opt,name=area,proto3" json:"area,omitempty"`
	Level                string   `protobuf:"bytes,7,opt,name=level,proto3" json:"level,omitempty"`
	Role                 string   `protobuf:"bytes,8,opt,name=role,proto3" json:"role,omitempty"`
	Title                string   `protobuf:"bytes,9,opt,name=title,proto3" json:"title,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GroupMessageEvent_Sender) Reset()         { *m = GroupMessageEvent_Sender{} }
func (m *GroupMessageEvent_Sender) String() string { return proto.CompactTextString(m) }
func (*GroupMessageEvent_Sender) ProtoMessage()    {}
func (*GroupMessageEvent_Sender) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b4afa4460e98c26, []int{1, 1}
}
func (m *GroupMessageEvent_Sender) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupMessageEvent_Sender) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupMessageEvent_Sender.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupMessageEvent_Sender) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupMessageEvent_Sender.Merge(m, src)
}
func (m *GroupMessageEvent_Sender) XXX_Size() int {
	return m.Size()
}
func (m *GroupMessageEvent_Sender) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupMessageEvent_Sender.DiscardUnknown(m)
}

var xxx_messageInfo_GroupMessageEvent_Sender proto.InternalMessageInfo

func (m *GroupMessageEvent_Sender) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GroupMessageEvent_Sender) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *GroupMessageEvent_Sender) GetCard() string {
	if m != nil {
		return m.Card
	}
	return ""
}

func (m *GroupMessageEvent_Sender) GetSex() string {
	if m != nil {
		return m.Sex
	}
	return ""
}

func (m *GroupMessageEvent_Sender) GetAge() int32 {
	if m != nil {
		return m.Age
	}
	return 0
}

func (m *GroupMessageEvent_Sender) GetArea() string {
	if m != nil {
		return m.Area
	}
	return ""
}

func (m *GroupMessageEvent_Sender) GetLevel() string {
	if m != nil {
		return m.Level
	}
	return ""
}

func (m *GroupMessageEvent_Sender) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

func (m *GroupMessageEvent_Sender) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

type GroupUploadNoticeEvent struct {
	Time                 int64                        `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	SelfId               int64                        `protobuf:"varint,2,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	PostType             string                       `protobuf:"bytes,3,opt,name=post_type,json=postType,proto3" json:"post_type,omitempty"`
	NoticeType           string                       `protobuf:"bytes,4,opt,name=notice_type,json=noticeType,proto3" json:"notice_type,omitempty"`
	GroupId              int64                        `protobuf:"varint,5,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	UserId               int64                        `protobuf:"varint,6,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	File                 *GroupUploadNoticeEvent_File `protobuf:"bytes,7,opt,name=file,proto3" json:"file,omitempty"`
	Extra                map[string]string            `protobuf:"bytes,255,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}                     `json:"-"`
	XXX_unrecognized     []byte                       `json:"-"`
	XXX_sizecache        int32                        `json:"-"`
}

func (m *GroupUploadNoticeEvent) Reset()         { *m = GroupUploadNoticeEvent{} }
func (m *GroupUploadNoticeEvent) String() string { return proto.CompactTextString(m) }
func (*GroupUploadNoticeEvent) ProtoMessage()    {}
func (*GroupUploadNoticeEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b4afa4460e98c26, []int{2}
}
func (m *GroupUploadNoticeEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupUploadNoticeEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupUploadNoticeEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupUploadNoticeEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupUploadNoticeEvent.Merge(m, src)
}
func (m *GroupUploadNoticeEvent) XXX_Size() int {
	return m.Size()
}
func (m *GroupUploadNoticeEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupUploadNoticeEvent.DiscardUnknown(m)
}

var xxx_messageInfo_GroupUploadNoticeEvent proto.InternalMessageInfo

func (m *GroupUploadNoticeEvent) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *GroupUploadNoticeEvent) GetSelfId() int64 {
	if m != nil {
		return m.SelfId
	}
	return 0
}

func (m *GroupUploadNoticeEvent) GetPostType() string {
	if m != nil {
		return m.PostType
	}
	return ""
}

func (m *GroupUploadNoticeEvent) GetNoticeType() string {
	if m != nil {
		return m.NoticeType
	}
	return ""
}

func (m *GroupUploadNoticeEvent) GetGroupId() int64 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *GroupUploadNoticeEvent) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GroupUploadNoticeEvent) GetFile() *GroupUploadNoticeEvent_File {
	if m != nil {
		return m.File
	}
	return nil
}

func (m *GroupUploadNoticeEvent) GetExtra() map[string]string {
	if m != nil {
		return m.Extra
	}
	return nil
}

type GroupUploadNoticeEvent_File struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Size_                int64    `protobuf:"varint,3,opt,name=size,proto3" json:"size,omitempty"`
	Busid                int64    `protobuf:"varint,4,opt,name=busid,proto3" json:"busid,omitempty"`
	Url                  string   `protobuf:"bytes,5,opt,name=url,proto3" json:"url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GroupUploadNoticeEvent_File) Reset()         { *m = GroupUploadNoticeEvent_File{} }
func (m *GroupUploadNoticeEvent_File) String() string { return proto.CompactTextString(m) }
func (*GroupUploadNoticeEvent_File) ProtoMessage()    {}
func (*GroupUploadNoticeEvent_File) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b4afa4460e98c26, []int{2, 0}
}
func (m *GroupUploadNoticeEvent_File) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupUploadNoticeEvent_File) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupUploadNoticeEvent_File.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupUploadNoticeEvent_File) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupUploadNoticeEvent_File.Merge(m, src)
}
func (m *GroupUploadNoticeEvent_File) XXX_Size() int {
	return m.Size()
}
func (m *GroupUploadNoticeEvent_File) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupUploadNoticeEvent_File.DiscardUnknown(m)
}

var xxx_messageInfo_GroupUploadNoticeEvent_File proto.InternalMessageInfo

func (m *GroupUploadNoticeEvent_File) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *GroupUploadNoticeEvent_File) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GroupUploadNoticeEvent_File) GetSize_() int64 {
	if m != nil {
		return m.Size_
	}
	return 0
}

func (m *GroupUploadNoticeEvent_File) GetBusid() int64 {
	if m != nil {
		return m.Busid
	}
	return 0
}

func (m *GroupUploadNoticeEvent_File) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type GroupAdminNoticeEvent struct {
	Time                 int64             `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	SelfId               int64             `protobuf:"varint,2,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	PostType             string            `protobuf:"bytes,3,opt,name=post_type,json=postType,proto3" json:"post_type,omitempty"`
	NoticeType           string            `protobuf:"bytes,4,opt,name=notice_type,json=noticeType,proto3" json:"notice_type,omitempty"`
	SubType              string            `protobuf:"bytes,5,opt,name=sub_type,json=subType,proto3" json:"sub_type,omitempty"`
	GroupId              int64             `protobuf:"varint,6,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	UserId               int64             `protobuf:"varint,7,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Extra                map[string]string `protobuf:"bytes,255,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *GroupAdminNoticeEvent) Reset()         { *m = GroupAdminNoticeEvent{} }
func (m *GroupAdminNoticeEvent) String() string { return proto.CompactTextString(m) }
func (*GroupAdminNoticeEvent) ProtoMessage()    {}
func (*GroupAdminNoticeEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b4afa4460e98c26, []int{3}
}
func (m *GroupAdminNoticeEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupAdminNoticeEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupAdminNoticeEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupAdminNoticeEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupAdminNoticeEvent.Merge(m, src)
}
func (m *GroupAdminNoticeEvent) XXX_Size() int {
	return m.Size()
}
func (m *GroupAdminNoticeEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupAdminNoticeEvent.DiscardUnknown(m)
}

var xxx_messageInfo_GroupAdminNoticeEvent proto.InternalMessageInfo

func (m *GroupAdminNoticeEvent) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *GroupAdminNoticeEvent) GetSelfId() int64 {
	if m != nil {
		return m.SelfId
	}
	return 0
}

func (m *GroupAdminNoticeEvent) GetPostType() string {
	if m != nil {
		return m.PostType
	}
	return ""
}

func (m *GroupAdminNoticeEvent) GetNoticeType() string {
	if m != nil {
		return m.NoticeType
	}
	return ""
}

func (m *GroupAdminNoticeEvent) GetSubType() string {
	if m != nil {
		return m.SubType
	}
	return ""
}

func (m *GroupAdminNoticeEvent) GetGroupId() int64 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *GroupAdminNoticeEvent) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GroupAdminNoticeEvent) GetExtra() map[string]string {
	if m != nil {
		return m.Extra
	}
	return nil
}

type GroupDecreaseNoticeEvent struct {
	Time                 int64             `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	SelfId               int64             `protobuf:"varint,2,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	PostType             string            `protobuf:"bytes,3,opt,name=post_type,json=postType,proto3" json:"post_type,omitempty"`
	NoticeType           string            `protobuf:"bytes,4,opt,name=notice_type,json=noticeType,proto3" json:"notice_type,omitempty"`
	SubType              string            `protobuf:"bytes,5,opt,name=sub_type,json=subType,proto3" json:"sub_type,omitempty"`
	GroupId              int64             `protobuf:"varint,6,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	OperatorId           int64             `protobuf:"varint,7,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	UserId               int64             `protobuf:"varint,8,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Extra                map[string]string `protobuf:"bytes,255,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *GroupDecreaseNoticeEvent) Reset()         { *m = GroupDecreaseNoticeEvent{} }
func (m *GroupDecreaseNoticeEvent) String() string { return proto.CompactTextString(m) }
func (*GroupDecreaseNoticeEvent) ProtoMessage()    {}
func (*GroupDecreaseNoticeEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b4afa4460e98c26, []int{4}
}
func (m *GroupDecreaseNoticeEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupDecreaseNoticeEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupDecreaseNoticeEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupDecreaseNoticeEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupDecreaseNoticeEvent.Merge(m, src)
}
func (m *GroupDecreaseNoticeEvent) XXX_Size() int {
	return m.Size()
}
func (m *GroupDecreaseNoticeEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupDecreaseNoticeEvent.DiscardUnknown(m)
}

var xxx_messageInfo_GroupDecreaseNoticeEvent proto.InternalMessageInfo

func (m *GroupDecreaseNoticeEvent) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *GroupDecreaseNoticeEvent) GetSelfId() int64 {
	if m != nil {
		return m.SelfId
	}
	return 0
}

func (m *GroupDecreaseNoticeEvent) GetPostType() string {
	if m != nil {
		return m.PostType
	}
	return ""
}

func (m *GroupDecreaseNoticeEvent) GetNoticeType() string {
	if m != nil {
		return m.NoticeType
	}
	return ""
}

func (m *GroupDecreaseNoticeEvent) GetSubType() string {
	if m != nil {
		return m.SubType
	}
	return ""
}

func (m *GroupDecreaseNoticeEvent) GetGroupId() int64 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *GroupDecreaseNoticeEvent) GetOperatorId() int64 {
	if m != nil {
		return m.OperatorId
	}
	return 0
}

func (m *GroupDecreaseNoticeEvent) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GroupDecreaseNoticeEvent) GetExtra() map[string]string {
	if m != nil {
		return m.Extra
	}
	return nil
}

type GroupIncreaseNoticeEvent struct {
	Time                 int64             `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	SelfId               int64             `protobuf:"varint,2,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	PostType             string            `protobuf:"bytes,3,opt,name=post_type,json=postType,proto3" json:"post_type,omitempty"`
	NoticeType           string            `protobuf:"bytes,4,opt,name=notice_type,json=noticeType,proto3" json:"notice_type,omitempty"`
	SubType              string            `protobuf:"bytes,5,opt,name=sub_type,json=subType,proto3" json:"sub_type,omitempty"`
	GroupId              int64             `protobuf:"varint,6,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	OperatorId           int64             `protobuf:"varint,7,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	UserId               int64             `protobuf:"varint,8,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Extra                map[string]string `protobuf:"bytes,255,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *GroupIncreaseNoticeEvent) Reset()         { *m = GroupIncreaseNoticeEvent{} }
func (m *GroupIncreaseNoticeEvent) String() string { return proto.CompactTextString(m) }
func (*GroupIncreaseNoticeEvent) ProtoMessage()    {}
func (*GroupIncreaseNoticeEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b4afa4460e98c26, []int{5}
}
func (m *GroupIncreaseNoticeEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupIncreaseNoticeEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupIncreaseNoticeEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupIncreaseNoticeEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupIncreaseNoticeEvent.Merge(m, src)
}
func (m *GroupIncreaseNoticeEvent) XXX_Size() int {
	return m.Size()
}
func (m *GroupIncreaseNoticeEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupIncreaseNoticeEvent.DiscardUnknown(m)
}

var xxx_messageInfo_GroupIncreaseNoticeEvent proto.InternalMessageInfo

func (m *GroupIncreaseNoticeEvent) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *GroupIncreaseNoticeEvent) GetSelfId() int64 {
	if m != nil {
		return m.SelfId
	}
	return 0
}

func (m *GroupIncreaseNoticeEvent) GetPostType() string {
	if m != nil {
		return m.PostType
	}
	return ""
}

func (m *GroupIncreaseNoticeEvent) GetNoticeType() string {
	if m != nil {
		return m.NoticeType
	}
	return ""
}

func (m *GroupIncreaseNoticeEvent) GetSubType() string {
	if m != nil {
		return m.SubType
	}
	return ""
}

func (m *GroupIncreaseNoticeEvent) GetGroupId() int64 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *GroupIncreaseNoticeEvent) GetOperatorId() int64 {
	if m != nil {
		return m.OperatorId
	}
	return 0
}

func (m *GroupIncreaseNoticeEvent) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GroupIncreaseNoticeEvent) GetExtra() map[string]string {
	if m != nil {
		return m.Extra
	}
	return nil
}

type GroupBanNoticeEvent struct {
	Time                 int64             `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	SelfId               int64             `protobuf:"varint,2,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	PostType             string            `protobuf:"bytes,3,opt,name=post_type,json=postType,proto3" json:"post_type,omitempty"`
	NoticeType           string            `protobuf:"bytes,4,opt,name=notice_type,json=noticeType,proto3" json:"notice_type,omitempty"`
	SubType              string            `protobuf:"bytes,5,opt,name=sub_type,json=subType,proto3" json:"sub_type,omitempty"`
	GroupId              int64             `protobuf:"varint,6,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	OperatorId           int64             `protobuf:"varint,7,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	UserId               int64             `protobuf:"varint,8,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Duration             int64             `protobuf:"varint,9,opt,name=duration,proto3" json:"duration,omitempty"`
	Extra                map[string]string `protobuf:"bytes,255,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *GroupBanNoticeEvent) Reset()         { *m = GroupBanNoticeEvent{} }
func (m *GroupBanNoticeEvent) String() string { return proto.CompactTextString(m) }
func (*GroupBanNoticeEvent) ProtoMessage()    {}
func (*GroupBanNoticeEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b4afa4460e98c26, []int{6}
}
func (m *GroupBanNoticeEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupBanNoticeEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupBanNoticeEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupBanNoticeEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupBanNoticeEvent.Merge(m, src)
}
func (m *GroupBanNoticeEvent) XXX_Size() int {
	return m.Size()
}
func (m *GroupBanNoticeEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupBanNoticeEvent.DiscardUnknown(m)
}

var xxx_messageInfo_GroupBanNoticeEvent proto.InternalMessageInfo

func (m *GroupBanNoticeEvent) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *GroupBanNoticeEvent) GetSelfId() int64 {
	if m != nil {
		return m.SelfId
	}
	return 0
}

func (m *GroupBanNoticeEvent) GetPostType() string {
	if m != nil {
		return m.PostType
	}
	return ""
}

func (m *GroupBanNoticeEvent) GetNoticeType() string {
	if m != nil {
		return m.NoticeType
	}
	return ""
}

func (m *GroupBanNoticeEvent) GetSubType() string {
	if m != nil {
		return m.SubType
	}
	return ""
}

func (m *GroupBanNoticeEvent) GetGroupId() int64 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *GroupBanNoticeEvent) GetOperatorId() int64 {
	if m != nil {
		return m.OperatorId
	}
	return 0
}

func (m *GroupBanNoticeEvent) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GroupBanNoticeEvent) GetDuration() int64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *GroupBanNoticeEvent) GetExtra() map[string]string {
	if m != nil {
		return m.Extra
	}
	return nil
}

type FriendAddNoticeEvent struct {
	Time                 int64             `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	SelfId               int64             `protobuf:"varint,2,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	PostType             string            `protobuf:"bytes,3,opt,name=post_type,json=postType,proto3" json:"post_type,omitempty"`
	NoticeType           string            `protobuf:"bytes,4,opt,name=notice_type,json=noticeType,proto3" json:"notice_type,omitempty"`
	UserId               int64             `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Extra                map[string]string `protobuf:"bytes,255,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *FriendAddNoticeEvent) Reset()         { *m = FriendAddNoticeEvent{} }
func (m *FriendAddNoticeEvent) String() string { return proto.CompactTextString(m) }
func (*FriendAddNoticeEvent) ProtoMessage()    {}
func (*FriendAddNoticeEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b4afa4460e98c26, []int{7}
}
func (m *FriendAddNoticeEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FriendAddNoticeEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FriendAddNoticeEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FriendAddNoticeEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FriendAddNoticeEvent.Merge(m, src)
}
func (m *FriendAddNoticeEvent) XXX_Size() int {
	return m.Size()
}
func (m *FriendAddNoticeEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_FriendAddNoticeEvent.DiscardUnknown(m)
}

var xxx_messageInfo_FriendAddNoticeEvent proto.InternalMessageInfo

func (m *FriendAddNoticeEvent) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *FriendAddNoticeEvent) GetSelfId() int64 {
	if m != nil {
		return m.SelfId
	}
	return 0
}

func (m *FriendAddNoticeEvent) GetPostType() string {
	if m != nil {
		return m.PostType
	}
	return ""
}

func (m *FriendAddNoticeEvent) GetNoticeType() string {
	if m != nil {
		return m.NoticeType
	}
	return ""
}

func (m *FriendAddNoticeEvent) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *FriendAddNoticeEvent) GetExtra() map[string]string {
	if m != nil {
		return m.Extra
	}
	return nil
}

type GroupRecallNoticeEvent struct {
	Time                 int64             `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	SelfId               int64             `protobuf:"varint,2,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	PostType             string            `protobuf:"bytes,3,opt,name=post_type,json=postType,proto3" json:"post_type,omitempty"`
	NoticeType           string            `protobuf:"bytes,4,opt,name=notice_type,json=noticeType,proto3" json:"notice_type,omitempty"`
	GroupId              int64             `protobuf:"varint,5,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	UserId               int64             `protobuf:"varint,6,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	OperatorId           int64             `protobuf:"varint,7,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	MessageId            int32             `protobuf:"varint,8,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	Extra                map[string]string `protobuf:"bytes,255,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *GroupRecallNoticeEvent) Reset()         { *m = GroupRecallNoticeEvent{} }
func (m *GroupRecallNoticeEvent) String() string { return proto.CompactTextString(m) }
func (*GroupRecallNoticeEvent) ProtoMessage()    {}
func (*GroupRecallNoticeEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b4afa4460e98c26, []int{8}
}
func (m *GroupRecallNoticeEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupRecallNoticeEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupRecallNoticeEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupRecallNoticeEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupRecallNoticeEvent.Merge(m, src)
}
func (m *GroupRecallNoticeEvent) XXX_Size() int {
	return m.Size()
}
func (m *GroupRecallNoticeEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupRecallNoticeEvent.DiscardUnknown(m)
}

var xxx_messageInfo_GroupRecallNoticeEvent proto.InternalMessageInfo

func (m *GroupRecallNoticeEvent) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *GroupRecallNoticeEvent) GetSelfId() int64 {
	if m != nil {
		return m.SelfId
	}
	return 0
}

func (m *GroupRecallNoticeEvent) GetPostType() string {
	if m != nil {
		return m.PostType
	}
	return ""
}

func (m *GroupRecallNoticeEvent) GetNoticeType() string {
	if m != nil {
		return m.NoticeType
	}
	return ""
}

func (m *GroupRecallNoticeEvent) GetGroupId() int64 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *GroupRecallNoticeEvent) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GroupRecallNoticeEvent) GetOperatorId() int64 {
	if m != nil {
		return m.OperatorId
	}
	return 0
}

func (m *GroupRecallNoticeEvent) GetMessageId() int32 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *GroupRecallNoticeEvent) GetExtra() map[string]string {
	if m != nil {
		return m.Extra
	}
	return nil
}

type FriendRecallNoticeEvent struct {
	Time                 int64             `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	SelfId               int64             `protobuf:"varint,2,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	PostType             string            `protobuf:"bytes,3,opt,name=post_type,json=postType,proto3" json:"post_type,omitempty"`
	NoticeType           string            `protobuf:"bytes,4,opt,name=notice_type,json=noticeType,proto3" json:"notice_type,omitempty"`
	UserId               int64             `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	MessageId            int32             `protobuf:"varint,6,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	Extra                map[string]string `protobuf:"bytes,255,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *FriendRecallNoticeEvent) Reset()         { *m = FriendRecallNoticeEvent{} }
func (m *FriendRecallNoticeEvent) String() string { return proto.CompactTextString(m) }
func (*FriendRecallNoticeEvent) ProtoMessage()    {}
func (*FriendRecallNoticeEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b4afa4460e98c26, []int{9}
}
func (m *FriendRecallNoticeEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FriendRecallNoticeEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FriendRecallNoticeEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FriendRecallNoticeEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FriendRecallNoticeEvent.Merge(m, src)
}
func (m *FriendRecallNoticeEvent) XXX_Size() int {
	return m.Size()
}
func (m *FriendRecallNoticeEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_FriendRecallNoticeEvent.DiscardUnknown(m)
}

var xxx_messageInfo_FriendRecallNoticeEvent proto.InternalMessageInfo

func (m *FriendRecallNoticeEvent) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *FriendRecallNoticeEvent) GetSelfId() int64 {
	if m != nil {
		return m.SelfId
	}
	return 0
}

func (m *FriendRecallNoticeEvent) GetPostType() string {
	if m != nil {
		return m.PostType
	}
	return ""
}

func (m *FriendRecallNoticeEvent) GetNoticeType() string {
	if m != nil {
		return m.NoticeType
	}
	return ""
}

func (m *FriendRecallNoticeEvent) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *FriendRecallNoticeEvent) GetMessageId() int32 {
	if m != nil {
		return m.MessageId
	}
	return 0
}

func (m *FriendRecallNoticeEvent) GetExtra() map[string]string {
	if m != nil {
		return m.Extra
	}
	return nil
}

type FriendRequestEvent struct {
	Time                 int64             `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	SelfId               int64             `protobuf:"varint,2,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	PostType             string            `protobuf:"bytes,3,opt,name=post_type,json=postType,proto3" json:"post_type,omitempty"`
	RequestType          string            `protobuf:"bytes,4,opt,name=request_type,json=requestType,proto3" json:"request_type,omitempty"`
	UserId               int64             `protobuf:"varint,5,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Comment              string            `protobuf:"bytes,6,opt,name=comment,proto3" json:"comment,omitempty"`
	Flag                 string            `protobuf:"bytes,7,opt,name=flag,proto3" json:"flag,omitempty"`
	Extra                map[string]string `protobuf:"bytes,255,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *FriendRequestEvent) Reset()         { *m = FriendRequestEvent{} }
func (m *FriendRequestEvent) String() string { return proto.CompactTextString(m) }
func (*FriendRequestEvent) ProtoMessage()    {}
func (*FriendRequestEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b4afa4460e98c26, []int{10}
}
func (m *FriendRequestEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FriendRequestEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FriendRequestEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FriendRequestEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FriendRequestEvent.Merge(m, src)
}
func (m *FriendRequestEvent) XXX_Size() int {
	return m.Size()
}
func (m *FriendRequestEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_FriendRequestEvent.DiscardUnknown(m)
}

var xxx_messageInfo_FriendRequestEvent proto.InternalMessageInfo

func (m *FriendRequestEvent) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *FriendRequestEvent) GetSelfId() int64 {
	if m != nil {
		return m.SelfId
	}
	return 0
}

func (m *FriendRequestEvent) GetPostType() string {
	if m != nil {
		return m.PostType
	}
	return ""
}

func (m *FriendRequestEvent) GetRequestType() string {
	if m != nil {
		return m.RequestType
	}
	return ""
}

func (m *FriendRequestEvent) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *FriendRequestEvent) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *FriendRequestEvent) GetFlag() string {
	if m != nil {
		return m.Flag
	}
	return ""
}

func (m *FriendRequestEvent) GetExtra() map[string]string {
	if m != nil {
		return m.Extra
	}
	return nil
}

type GroupRequestEvent struct {
	Time                 int64             `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	SelfId               int64             `protobuf:"varint,2,opt,name=self_id,json=selfId,proto3" json:"self_id,omitempty"`
	PostType             string            `protobuf:"bytes,3,opt,name=post_type,json=postType,proto3" json:"post_type,omitempty"`
	RequestType          string            `protobuf:"bytes,4,opt,name=request_type,json=requestType,proto3" json:"request_type,omitempty"`
	SubType              string            `protobuf:"bytes,5,opt,name=sub_type,json=subType,proto3" json:"sub_type,omitempty"`
	GroupId              int64             `protobuf:"varint,6,opt,name=group_id,json=groupId,proto3" json:"group_id,omitempty"`
	UserId               int64             `protobuf:"varint,7,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Comment              string            `protobuf:"bytes,8,opt,name=comment,proto3" json:"comment,omitempty"`
	Flag                 string            `protobuf:"bytes,9,opt,name=flag,proto3" json:"flag,omitempty"`
	Extra                map[string]string `protobuf:"bytes,255,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *GroupRequestEvent) Reset()         { *m = GroupRequestEvent{} }
func (m *GroupRequestEvent) String() string { return proto.CompactTextString(m) }
func (*GroupRequestEvent) ProtoMessage()    {}
func (*GroupRequestEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_8b4afa4460e98c26, []int{11}
}
func (m *GroupRequestEvent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GroupRequestEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GroupRequestEvent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GroupRequestEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GroupRequestEvent.Merge(m, src)
}
func (m *GroupRequestEvent) XXX_Size() int {
	return m.Size()
}
func (m *GroupRequestEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_GroupRequestEvent.DiscardUnknown(m)
}

var xxx_messageInfo_GroupRequestEvent proto.InternalMessageInfo

func (m *GroupRequestEvent) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *GroupRequestEvent) GetSelfId() int64 {
	if m != nil {
		return m.SelfId
	}
	return 0
}

func (m *GroupRequestEvent) GetPostType() string {
	if m != nil {
		return m.PostType
	}
	return ""
}

func (m *GroupRequestEvent) GetRequestType() string {
	if m != nil {
		return m.RequestType
	}
	return ""
}

func (m *GroupRequestEvent) GetSubType() string {
	if m != nil {
		return m.SubType
	}
	return ""
}

func (m *GroupRequestEvent) GetGroupId() int64 {
	if m != nil {
		return m.GroupId
	}
	return 0
}

func (m *GroupRequestEvent) GetUserId() int64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *GroupRequestEvent) GetComment() string {
	if m != nil {
		return m.Comment
	}
	return ""
}

func (m *GroupRequestEvent) GetFlag() string {
	if m != nil {
		return m.Flag
	}
	return ""
}

func (m *GroupRequestEvent) GetExtra() map[string]string {
	if m != nil {
		return m.Extra
	}
	return nil
}

func init() {
	proto.RegisterType((*PrivateMessageEvent)(nil), "onebot.PrivateMessageEvent")
	proto.RegisterMapType((map[string]string)(nil), "onebot.PrivateMessageEvent.ExtraEntry")
	proto.RegisterType((*PrivateMessageEvent_Sender)(nil), "onebot.PrivateMessageEvent.Sender")
	proto.RegisterType((*GroupMessageEvent)(nil), "onebot.GroupMessageEvent")
	proto.RegisterMapType((map[string]string)(nil), "onebot.GroupMessageEvent.ExtraEntry")
	proto.RegisterType((*GroupMessageEvent_Anonymous)(nil), "onebot.GroupMessageEvent.Anonymous")
	proto.RegisterType((*GroupMessageEvent_Sender)(nil), "onebot.GroupMessageEvent.Sender")
	proto.RegisterType((*GroupUploadNoticeEvent)(nil), "onebot.GroupUploadNoticeEvent")
	proto.RegisterMapType((map[string]string)(nil), "onebot.GroupUploadNoticeEvent.ExtraEntry")
	proto.RegisterType((*GroupUploadNoticeEvent_File)(nil), "onebot.GroupUploadNoticeEvent.File")
	proto.RegisterType((*GroupAdminNoticeEvent)(nil), "onebot.GroupAdminNoticeEvent")
	proto.RegisterMapType((map[string]string)(nil), "onebot.GroupAdminNoticeEvent.ExtraEntry")
	proto.RegisterType((*GroupDecreaseNoticeEvent)(nil), "onebot.GroupDecreaseNoticeEvent")
	proto.RegisterMapType((map[string]string)(nil), "onebot.GroupDecreaseNoticeEvent.ExtraEntry")
	proto.RegisterType((*GroupIncreaseNoticeEvent)(nil), "onebot.GroupIncreaseNoticeEvent")
	proto.RegisterMapType((map[string]string)(nil), "onebot.GroupIncreaseNoticeEvent.ExtraEntry")
	proto.RegisterType((*GroupBanNoticeEvent)(nil), "onebot.GroupBanNoticeEvent")
	proto.RegisterMapType((map[string]string)(nil), "onebot.GroupBanNoticeEvent.ExtraEntry")
	proto.RegisterType((*FriendAddNoticeEvent)(nil), "onebot.FriendAddNoticeEvent")
	proto.RegisterMapType((map[string]string)(nil), "onebot.FriendAddNoticeEvent.ExtraEntry")
	proto.RegisterType((*GroupRecallNoticeEvent)(nil), "onebot.GroupRecallNoticeEvent")
	proto.RegisterMapType((map[string]string)(nil), "onebot.GroupRecallNoticeEvent.ExtraEntry")
	proto.RegisterType((*FriendRecallNoticeEvent)(nil), "onebot.FriendRecallNoticeEvent")
	proto.RegisterMapType((map[string]string)(nil), "onebot.FriendRecallNoticeEvent.ExtraEntry")
	proto.RegisterType((*FriendRequestEvent)(nil), "onebot.FriendRequestEvent")
	proto.RegisterMapType((map[string]string)(nil), "onebot.FriendRequestEvent.ExtraEntry")
	proto.RegisterType((*GroupRequestEvent)(nil), "onebot.GroupRequestEvent")
	proto.RegisterMapType((map[string]string)(nil), "onebot.GroupRequestEvent.ExtraEntry")
}

func init() { proto.RegisterFile("onebot_event.proto", fileDescriptor_8b4afa4460e98c26) }

var fileDescriptor_8b4afa4460e98c26 = []byte{
	// 998 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x58, 0xcd, 0x6e, 0xe4, 0x44,
	0x10, 0xc6, 0xf6, 0x8c, 0xc7, 0x2e, 0x2f, 0xb0, 0xdb, 0xbb, 0xb0, 0xde, 0x41, 0x24, 0x43, 0xf8,
	0x9b, 0x05, 0x69, 0x0e, 0xe1, 0x40, 0xb4, 0xfc, 0x26, 0x90, 0x45, 0x39, 0x80, 0x50, 0x03, 0xe7,
	0xa8, 0x67, 0xdc, 0x89, 0xac, 0xf5, 0xd8, 0x43, 0xbb, 0x9d, 0xdd, 0xe1, 0xce, 0x1b, 0x70, 0xe0,
	0x55, 0xb8, 0x71, 0x04, 0x09, 0x24, 0x24, 0x78, 0x00, 0x14, 0x1e, 0x01, 0xee, 0xa0, 0xae, 0xb6,
	0x3d, 0xb6, 0xe7, 0x27, 0x82, 0x4c, 0x14, 0x45, 0xec, 0xad, 0xaa, 0xab, 0xab, 0xbb, 0xea, 0xab,
	0xaf, 0xc6, 0x5d, 0x03, 0x24, 0x89, 0xf9, 0x30, 0x91, 0x87, 0xfc, 0x84, 0xc7, 0x72, 0x30, 0x11,
	0x89, 0x4c, 0x88, 0xad, 0xd7, 0xba, 0x37, 0x72, 0xdb, 0x90, 0xa5, 0x5c, 0x9b, 0xb6, 0x7e, 0x6e,
	0xc1, 0xcd, 0x4f, 0x45, 0x78, 0xc2, 0x24, 0xff, 0x98, 0xa7, 0x29, 0x3b, 0xe6, 0xfb, 0xca, 0x91,
	0x10, 0x68, 0xc9, 0x70, 0xcc, 0x7d, 0xa3, 0x67, 0xf4, 0x2d, 0x8a, 0x32, 0xb9, 0x0d, 0x9d, 0x94,
	0x47, 0x47, 0x87, 0x61, 0xe0, 0x9b, 0xb8, 0x6c, 0x2b, 0xf5, 0x20, 0x20, 0xcf, 0x81, 0x3b, 0x49,
	0x52, 0x79, 0x28, 0xa7, 0x13, 0xee, 0x5b, 0x3d, 0xa3, 0xef, 0x52, 0x47, 0x2d, 0x7c, 0x3e, 0x9d,
	0x70, 0xf2, 0x02, 0x5c, 0x1b, 0xeb, 0x93, 0xb5, 0xbd, 0x85, 0x76, 0x2f, 0x5f, 0xc3, 0x2d, 0x77,
	0xc0, 0x49, 0xb3, 0xa1, 0x36, 0xb7, 0xd1, 0xdc, 0x49, 0xb3, 0x21, 0x9a, 0x9e, 0x07, 0x28, 0xbc,
	0xc3, 0xc0, 0xb7, 0x7b, 0x46, 0xbf, 0x4d, 0xdd, 0x7c, 0xe5, 0x20, 0x50, 0x21, 0x65, 0x29, 0x17,
	0xca, 0xd6, 0xd1, 0x21, 0x29, 0xf5, 0x20, 0x20, 0x77, 0xa1, 0x93, 0xef, 0xf2, 0x9d, 0x9e, 0xd5,
	0xf7, 0xb6, 0x9f, 0x1e, 0xe8, 0xe4, 0x07, 0x79, 0x9a, 0xb4, 0xb0, 0x93, 0x4d, 0xf0, 0x04, 0x7b,
	0x78, 0x58, 0x6c, 0x77, 0x31, 0x00, 0x10, 0xec, 0x61, 0xbe, 0x53, 0x61, 0x71, 0x94, 0xc4, 0xd2,
	0x07, 0xbc, 0x1d, 0x65, 0x72, 0x0f, 0xec, 0x94, 0xc7, 0x01, 0x17, 0xbe, 0xd7, 0x33, 0xfa, 0xde,
	0xf6, 0x56, 0x71, 0xfc, 0x02, 0x30, 0x07, 0x9f, 0xe1, 0x4e, 0x9a, 0x7b, 0x90, 0x77, 0xa0, 0xcd,
	0x1f, 0x49, 0xc1, 0xfc, 0xbf, 0x0d, 0x0c, 0xed, 0x95, 0x55, 0xbe, 0xfb, 0x6a, 0xe7, 0x7e, 0x2c,
	0xc5, 0x94, 0x6a, 0xaf, 0x2e, 0x03, 0x5b, 0x1f, 0x58, 0xcd, 0xde, 0xa8, 0x65, 0xdf, 0x05, 0x27,
	0x0e, 0x47, 0x0f, 0x62, 0x36, 0xe6, 0x58, 0x2a, 0x97, 0x96, 0x3a, 0xb9, 0x0e, 0x56, 0xca, 0x1f,
	0xe5, 0x65, 0x52, 0xa2, 0x5a, 0x51, 0x89, 0xb7, 0x30, 0x3d, 0x25, 0x76, 0x77, 0x00, 0x66, 0xf7,
	0x2a, 0xfb, 0x03, 0x3e, 0xc5, 0x2b, 0x5c, 0xaa, 0x44, 0x72, 0x0b, 0xda, 0x27, 0x2c, 0xca, 0x8a,
	0xc3, 0xb5, 0x72, 0xcf, 0xdc, 0x31, 0xb6, 0x7e, 0xb5, 0xe1, 0xc6, 0x47, 0x22, 0xc9, 0x26, 0x57,
	0x91, 0x4d, 0x77, 0xc0, 0x39, 0x56, 0xb1, 0xcf, 0xe8, 0xd4, 0x41, 0xbd, 0x4e, 0x34, 0xa7, 0x06,
	0xf5, 0x2e, 0xb8, 0x2c, 0x4e, 0xe2, 0xe9, 0x38, 0xc9, 0x52, 0xe4, 0x8e, 0xb7, 0xfd, 0x62, 0x51,
	0xcf, 0x39, 0x20, 0x06, 0xbb, 0xc5, 0x56, 0x3a, 0xf3, 0xaa, 0x72, 0x15, 0xfe, 0x1d, 0x57, 0xbd,
	0xa5, 0x5c, 0xbd, 0x56, 0xe1, 0xea, 0x4e, 0xc9, 0xd5, 0x27, 0x31, 0xbe, 0xde, 0xf2, 0xf8, 0x1a,
	0x4c, 0x7d, 0xab, 0xc1, 0xd4, 0x97, 0x96, 0x7b, 0xce, 0xf3, 0xf4, 0x03, 0x70, 0xcb, 0x74, 0xc9,
	0x53, 0x60, 0x96, 0x2c, 0x35, 0xc3, 0x40, 0xc5, 0x59, 0x61, 0x27, 0xca, 0x18, 0x7b, 0xc4, 0x8e,
	0xf3, 0x9a, 0xa3, 0xdc, 0xfd, 0xd1, 0x38, 0x1f, 0xdb, 0x09, 0xb4, 0x46, 0x4c, 0x04, 0xc5, 0x99,
	0x4a, 0x2e, 0x3a, 0xa0, 0x35, 0xd7, 0x01, 0xed, 0xb2, 0x03, 0x94, 0x1f, 0x13, 0x9c, 0x21, 0x47,
	0x5c, 0x8a, 0xb2, 0x62, 0x7d, 0xc4, 0x4f, 0x78, 0x84, 0xdc, 0x70, 0xa9, 0x56, 0xd4, 0x4e, 0x91,
	0x44, 0x1c, 0x69, 0xe1, 0x52, 0x94, 0xd5, 0x4e, 0x19, 0xca, 0xa8, 0xf8, 0x31, 0xd1, 0xca, 0x39,
	0xba, 0xea, 0x37, 0x0b, 0x9e, 0x45, 0xc8, 0xbf, 0x98, 0x44, 0x09, 0x0b, 0x3e, 0x49, 0x64, 0x38,
	0x5a, 0x7b, 0x6b, 0x6d, 0x82, 0x17, 0xe3, 0xc1, 0xd5, 0xce, 0x02, 0xbd, 0x54, 0x34, 0x56, 0xd9,
	0x1e, 0xed, 0xa5, 0xed, 0x61, 0xd7, 0x6a, 0xf3, 0x26, 0xb4, 0x8e, 0xc2, 0x88, 0x23, 0x64, 0xcd,
	0xce, 0x98, 0x4b, 0x66, 0x70, 0x3f, 0x8c, 0x38, 0x45, 0x07, 0xf2, 0x7e, 0x83, 0x7a, 0x77, 0xcf,
	0x70, 0x9d, 0xe7, 0xdf, 0x11, 0xb4, 0xd4, 0x79, 0x15, 0xea, 0xb9, 0xab, 0xa8, 0x97, 0x86, 0x5f,
	0x69, 0x4c, 0x2c, 0x8a, 0xb2, 0x2a, 0xc7, 0x30, 0x4b, 0xc3, 0x00, 0x91, 0xb0, 0xa8, 0x56, 0x54,
	0xd9, 0x32, 0x11, 0xe5, 0x3f, 0x2c, 0x4a, 0x3c, 0x47, 0x59, 0x7f, 0x32, 0xe1, 0x19, 0x4c, 0x67,
	0x37, 0x18, 0x87, 0xf1, 0xe5, 0x55, 0x75, 0xd9, 0xcf, 0x65, 0xb5, 0xe0, 0xf6, 0xd2, 0x82, 0xd7,
	0x3f, 0xbc, 0xef, 0x35, 0xea, 0xd6, 0xaf, 0xd5, 0xad, 0x99, 0xe8, 0x82, 0xb2, 0xfd, 0x77, 0x38,
	0xff, 0x34, 0xc1, 0xc7, 0x5b, 0x3e, 0xe4, 0x23, 0xc1, 0x59, 0xca, 0xaf, 0x14, 0xa2, 0x9b, 0xe0,
	0x25, 0x13, 0x2e, 0x98, 0x4c, 0x2a, 0xa8, 0x42, 0xb1, 0xb4, 0xea, 0x13, 0xb4, 0xd7, 0x80, 0xfc,
	0xf5, 0x1a, 0xe4, 0x0b, 0xc0, 0xb8, 0x18, 0xd4, 0x0f, 0xe2, 0xc7, 0xa8, 0x97, 0xa8, 0x2f, 0x00,
	0x63, 0xad, 0xa8, 0x7f, 0x6d, 0xc1, 0x4d, 0xbc, 0x68, 0x8f, 0xc5, 0xff, 0x13, 0xc0, 0xbb, 0xe0,
	0x04, 0x99, 0x60, 0x32, 0x4c, 0x62, 0xfc, 0xae, 0x5a, 0xb4, 0xd4, 0x97, 0x3f, 0xa9, 0x17, 0x60,
	0xb4, 0xd6, 0x3a, 0x7c, 0x63, 0xc2, 0xad, 0xfb, 0x22, 0xe4, 0x71, 0xb0, 0x1b, 0x5c, 0xd6, 0x77,
	0xb9, 0x82, 0x58, 0xbb, 0x86, 0xd8, 0xbb, 0x0d, 0x54, 0x5e, 0x2d, 0x50, 0x59, 0x14, 0xf1, 0xba,
	0x7f, 0x14, 0xf4, 0x83, 0x85, 0xf2, 0x11, 0x8b, 0xa2, 0x2b, 0xf4, 0x60, 0x39, 0x93, 0x9f, 0xf5,
	0x19, 0xc2, 0x69, 0xce, 0x10, 0xab, 0xdf, 0x2d, 0x73, 0x70, 0xac, 0x15, 0xf5, 0xef, 0x4c, 0xb8,
	0xad, 0x4b, 0x7b, 0xa9, 0xb0, 0x2f, 0xe5, 0xe3, 0x19, 0xe3, 0xd7, 0x6e, 0x03, 0xba, 0xd7, 0xea,
	0x74, 0xbd, 0x58, 0xec, 0xbe, 0x37, 0x81, 0x14, 0xf7, 0x7c, 0x99, 0xf1, 0x54, 0x5e, 0xc0, 0xe4,
	0x2a, 0xf4, 0xc9, 0xb5, 0xc9, 0x35, 0x5f, 0x5b, 0x0d, 0x9c, 0x0f, 0x9d, 0x51, 0x32, 0x1e, 0xf3,
	0x58, 0xe6, 0x03, 0x49, 0xa1, 0x96, 0x33, 0x53, 0x67, 0x36, 0x33, 0x91, 0xb7, 0x1b, 0x38, 0xbe,
	0xdc, 0xc4, 0x71, 0x96, 0xdf, 0x5a, 0x21, 0xfc, 0xcb, 0xcc, 0x67, 0xff, 0xcb, 0x43, 0x70, 0xcd,
	0x8f, 0xd9, 0x0a, 0xee, 0xce, 0x62, 0xdc, 0xdd, 0x0a, 0xee, 0xab, 0xa7, 0xe5, 0x8b, 0x82, 0x7d,
	0xef, 0xfa, 0x0f, 0xa7, 0x1b, 0xc6, 0x2f, 0xa7, 0x1b, 0xc6, 0xef, 0xa7, 0x1b, 0xc6, 0xb7, 0x7f,
	0x6c, 0x3c, 0x31, 0xb4, 0xf1, 0xbf, 0xbd, 0x37, 0xfe, 0x09, 0x00, 0x00, 0xff, 0xff, 0x56, 0x3b,
	0x22, 0x78, 0x0c, 0x14, 0x00, 0x00,
}

func (m *PrivateMessageEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrivateMessageEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrivateMessageEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Extra) > 0 {
		for k := range m.Extra {
			v := m.Extra[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintOnebotEvent(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintOnebotEvent(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintOnebotEvent(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xf
			i--
			dAtA[i] = 0xfa
		}
	}
	if m.Sender != nil {
		{
			size, err := m.Sender.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOnebotEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.Font != 0 {
		i = encodeVarintOnebotEvent(dAtA, i, uint64(m.Font))
		i--
		dAtA[i] = 0x50
	}
	if len(m.RawMessage) > 0 {
		i -= len(m.RawMessage)
		copy(dAtA[i:], m.RawMessage)
		i = encodeVarintOnebotEvent(dAtA, i, uint64(len(m.RawMessage)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Message) > 0 {
		for iNdEx := len(m.Message) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Message[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOnebotEvent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x42
		}
	}
	if m.UserId != 0 {
		i = encodeVarintOnebotEvent(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x38
	}
	if m.MessageId != 0 {
		i = encodeVarintOnebotEvent(dAtA, i, uint64(m.MessageId))
		i--
		dAtA[i] = 0x30
	}
	if len(m.SubType) > 0 {
		i -= len(m.SubType)
		copy(dAtA[i:], m.SubType)
		i = encodeVarintOnebotEvent(dAtA, i, uint64(len(m.SubType)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.MessageType) > 0 {
		i -= len(m.MessageType)
		copy(dAtA[i:], m.MessageType)
		i = encodeVarintOnebotEvent(dAtA, i, uint64(len(m.MessageType)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PostType) > 0 {
		i -= len(m.PostType)
		copy(dAtA[i:], m.PostType)
		i = encodeVarintOnebotEvent(dAtA, i, uint64(len(m.PostType)))
		i--
		dAtA[i] = 0x1a
	}
	if m.SelfId != 0 {
		i = encodeVarintOnebotEvent(dAtA, i, uint64(m.SelfId))
		i--
		dAtA[i] = 0x10
	}
	if m.Time != 0 {
		i = encodeVarintOnebotEvent(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PrivateMessageEvent_Sender) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrivateMessageEvent_Sender) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PrivateMessageEvent_Sender) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Age != 0 {
		i = encodeVarintOnebotEvent(dAtA, i, uint64(m.Age))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Sex) > 0 {
		i -= len(m.Sex)
		copy(dAtA[i:], m.Sex)
		i = encodeVarintOnebotEvent(dAtA, i, uint64(len(m.Sex)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Nickname) > 0 {
		i -= len(m.Nickname)
		copy(dAtA[i:], m.Nickname)
		i = encodeVarintOnebotEvent(dAtA, i, uint64(len(m.Nickname)))
		i--
		dAtA[i] = 0x12
	}
	if m.UserId != 0 {
		i = encodeVarintOnebotEvent(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GroupMessageEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupMessageEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupMessageEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Extra) > 0 {
		for k := range m.Extra {
			v := m.Extra[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintOnebotEvent(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintOnebotEvent(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintOnebotEvent(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xf
			i--
			dAtA[i] = 0xfa
		}
	}
	if m.Sender != nil {
		{
			size, err := m.Sender.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOnebotEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.Font != 0 {
		i = encodeVarintOnebotEvent(dAtA, i, uint64(m.Font))
		i--
		dAtA[i] = 0x60
	}
	if len(m.RawMessage) > 0 {
		i -= len(m.RawMessage)
		copy(dAtA[i:], m.RawMessage)
		i = encodeVarintOnebotEvent(dAtA, i, uint64(len(m.RawMessage)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Message) > 0 {
		for iNdEx := len(m.Message) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Message[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintOnebotEvent(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if m.Anonymous != nil {
		{
			size, err := m.Anonymous.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOnebotEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.UserId != 0 {
		i = encodeVarintOnebotEvent(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x40
	}
	if m.GroupId != 0 {
		i = encodeVarintOnebotEvent(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x38
	}
	if m.MessageId != 0 {
		i = encodeVarintOnebotEvent(dAtA, i, uint64(m.MessageId))
		i--
		dAtA[i] = 0x30
	}
	if len(m.SubType) > 0 {
		i -= len(m.SubType)
		copy(dAtA[i:], m.SubType)
		i = encodeVarintOnebotEvent(dAtA, i, uint64(len(m.SubType)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.MessageType) > 0 {
		i -= len(m.MessageType)
		copy(dAtA[i:], m.MessageType)
		i = encodeVarintOnebotEvent(dAtA, i, uint64(len(m.MessageType)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PostType) > 0 {
		i -= len(m.PostType)
		copy(dAtA[i:], m.PostType)
		i = encodeVarintOnebotEvent(dAtA, i, uint64(len(m.PostType)))
		i--
		dAtA[i] = 0x1a
	}
	if m.SelfId != 0 {
		i = encodeVarintOnebotEvent(dAtA, i, uint64(m.SelfId))
		i--
		dAtA[i] = 0x10
	}
	if m.Time != 0 {
		i = encodeVarintOnebotEvent(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GroupMessageEvent_Anonymous) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupMessageEvent_Anonymous) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupMessageEvent_Anonymous) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Flag) > 0 {
		i -= len(m.Flag)
		copy(dAtA[i:], m.Flag)
		i = encodeVarintOnebotEvent(dAtA, i, uint64(len(m.Flag)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintOnebotEvent(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintOnebotEvent(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GroupMessageEvent_Sender) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupMessageEvent_Sender) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupMessageEvent_Sender) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintOnebotEvent(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Role) > 0 {
		i -= len(m.Role)
		copy(dAtA[i:], m.Role)
		i = encodeVarintOnebotEvent(dAtA, i, uint64(len(m.Role)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Level) > 0 {
		i -= len(m.Level)
		copy(dAtA[i:], m.Level)
		i = encodeVarintOnebotEvent(dAtA, i, uint64(len(m.Level)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Area) > 0 {
		i -= len(m.Area)
		copy(dAtA[i:], m.Area)
		i = encodeVarintOnebotEvent(dAtA, i, uint64(len(m.Area)))
		i--
		dAtA[i] = 0x32
	}
	if m.Age != 0 {
		i = encodeVarintOnebotEvent(dAtA, i, uint64(m.Age))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Sex) > 0 {
		i -= len(m.Sex)
		copy(dAtA[i:], m.Sex)
		i = encodeVarintOnebotEvent(dAtA, i, uint64(len(m.Sex)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Card) > 0 {
		i -= len(m.Card)
		copy(dAtA[i:], m.Card)
		i = encodeVarintOnebotEvent(dAtA, i, uint64(len(m.Card)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Nickname) > 0 {
		i -= len(m.Nickname)
		copy(dAtA[i:], m.Nickname)
		i = encodeVarintOnebotEvent(dAtA, i, uint64(len(m.Nickname)))
		i--
		dAtA[i] = 0x12
	}
	if m.UserId != 0 {
		i = encodeVarintOnebotEvent(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GroupUploadNoticeEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupUploadNoticeEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupUploadNoticeEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Extra) > 0 {
		for k := range m.Extra {
			v := m.Extra[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintOnebotEvent(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintOnebotEvent(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintOnebotEvent(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xf
			i--
			dAtA[i] = 0xfa
		}
	}
	if m.File != nil {
		{
			size, err := m.File.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOnebotEvent(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.UserId != 0 {
		i = encodeVarintOnebotEvent(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x30
	}
	if m.GroupId != 0 {
		i = encodeVarintOnebotEvent(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x28
	}
	if len(m.NoticeType) > 0 {
		i -= len(m.NoticeType)
		copy(dAtA[i:], m.NoticeType)
		i = encodeVarintOnebotEvent(dAtA, i, uint64(len(m.NoticeType)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PostType) > 0 {
		i -= len(m.PostType)
		copy(dAtA[i:], m.PostType)
		i = encodeVarintOnebotEvent(dAtA, i, uint64(len(m.PostType)))
		i--
		dAtA[i] = 0x1a
	}
	if m.SelfId != 0 {
		i = encodeVarintOnebotEvent(dAtA, i, uint64(m.SelfId))
		i--
		dAtA[i] = 0x10
	}
	if m.Time != 0 {
		i = encodeVarintOnebotEvent(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GroupUploadNoticeEvent_File) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupUploadNoticeEvent_File) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupUploadNoticeEvent_File) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Url) > 0 {
		i -= len(m.Url)
		copy(dAtA[i:], m.Url)
		i = encodeVarintOnebotEvent(dAtA, i, uint64(len(m.Url)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Busid != 0 {
		i = encodeVarintOnebotEvent(dAtA, i, uint64(m.Busid))
		i--
		dAtA[i] = 0x20
	}
	if m.Size_ != 0 {
		i = encodeVarintOnebotEvent(dAtA, i, uint64(m.Size_))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintOnebotEvent(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintOnebotEvent(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GroupAdminNoticeEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupAdminNoticeEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupAdminNoticeEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Extra) > 0 {
		for k := range m.Extra {
			v := m.Extra[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintOnebotEvent(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintOnebotEvent(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintOnebotEvent(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xf
			i--
			dAtA[i] = 0xfa
		}
	}
	if m.UserId != 0 {
		i = encodeVarintOnebotEvent(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x38
	}
	if m.GroupId != 0 {
		i = encodeVarintOnebotEvent(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x30
	}
	if len(m.SubType) > 0 {
		i -= len(m.SubType)
		copy(dAtA[i:], m.SubType)
		i = encodeVarintOnebotEvent(dAtA, i, uint64(len(m.SubType)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.NoticeType) > 0 {
		i -= len(m.NoticeType)
		copy(dAtA[i:], m.NoticeType)
		i = encodeVarintOnebotEvent(dAtA, i, uint64(len(m.NoticeType)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PostType) > 0 {
		i -= len(m.PostType)
		copy(dAtA[i:], m.PostType)
		i = encodeVarintOnebotEvent(dAtA, i, uint64(len(m.PostType)))
		i--
		dAtA[i] = 0x1a
	}
	if m.SelfId != 0 {
		i = encodeVarintOnebotEvent(dAtA, i, uint64(m.SelfId))
		i--
		dAtA[i] = 0x10
	}
	if m.Time != 0 {
		i = encodeVarintOnebotEvent(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GroupDecreaseNoticeEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupDecreaseNoticeEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupDecreaseNoticeEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Extra) > 0 {
		for k := range m.Extra {
			v := m.Extra[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintOnebotEvent(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintOnebotEvent(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintOnebotEvent(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xf
			i--
			dAtA[i] = 0xfa
		}
	}
	if m.UserId != 0 {
		i = encodeVarintOnebotEvent(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x40
	}
	if m.OperatorId != 0 {
		i = encodeVarintOnebotEvent(dAtA, i, uint64(m.OperatorId))
		i--
		dAtA[i] = 0x38
	}
	if m.GroupId != 0 {
		i = encodeVarintOnebotEvent(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x30
	}
	if len(m.SubType) > 0 {
		i -= len(m.SubType)
		copy(dAtA[i:], m.SubType)
		i = encodeVarintOnebotEvent(dAtA, i, uint64(len(m.SubType)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.NoticeType) > 0 {
		i -= len(m.NoticeType)
		copy(dAtA[i:], m.NoticeType)
		i = encodeVarintOnebotEvent(dAtA, i, uint64(len(m.NoticeType)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PostType) > 0 {
		i -= len(m.PostType)
		copy(dAtA[i:], m.PostType)
		i = encodeVarintOnebotEvent(dAtA, i, uint64(len(m.PostType)))
		i--
		dAtA[i] = 0x1a
	}
	if m.SelfId != 0 {
		i = encodeVarintOnebotEvent(dAtA, i, uint64(m.SelfId))
		i--
		dAtA[i] = 0x10
	}
	if m.Time != 0 {
		i = encodeVarintOnebotEvent(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GroupIncreaseNoticeEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupIncreaseNoticeEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupIncreaseNoticeEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Extra) > 0 {
		for k := range m.Extra {
			v := m.Extra[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintOnebotEvent(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintOnebotEvent(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintOnebotEvent(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xf
			i--
			dAtA[i] = 0xfa
		}
	}
	if m.UserId != 0 {
		i = encodeVarintOnebotEvent(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x40
	}
	if m.OperatorId != 0 {
		i = encodeVarintOnebotEvent(dAtA, i, uint64(m.OperatorId))
		i--
		dAtA[i] = 0x38
	}
	if m.GroupId != 0 {
		i = encodeVarintOnebotEvent(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x30
	}
	if len(m.SubType) > 0 {
		i -= len(m.SubType)
		copy(dAtA[i:], m.SubType)
		i = encodeVarintOnebotEvent(dAtA, i, uint64(len(m.SubType)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.NoticeType) > 0 {
		i -= len(m.NoticeType)
		copy(dAtA[i:], m.NoticeType)
		i = encodeVarintOnebotEvent(dAtA, i, uint64(len(m.NoticeType)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PostType) > 0 {
		i -= len(m.PostType)
		copy(dAtA[i:], m.PostType)
		i = encodeVarintOnebotEvent(dAtA, i, uint64(len(m.PostType)))
		i--
		dAtA[i] = 0x1a
	}
	if m.SelfId != 0 {
		i = encodeVarintOnebotEvent(dAtA, i, uint64(m.SelfId))
		i--
		dAtA[i] = 0x10
	}
	if m.Time != 0 {
		i = encodeVarintOnebotEvent(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GroupBanNoticeEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupBanNoticeEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupBanNoticeEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Extra) > 0 {
		for k := range m.Extra {
			v := m.Extra[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintOnebotEvent(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintOnebotEvent(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintOnebotEvent(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xf
			i--
			dAtA[i] = 0xfa
		}
	}
	if m.Duration != 0 {
		i = encodeVarintOnebotEvent(dAtA, i, uint64(m.Duration))
		i--
		dAtA[i] = 0x48
	}
	if m.UserId != 0 {
		i = encodeVarintOnebotEvent(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x40
	}
	if m.OperatorId != 0 {
		i = encodeVarintOnebotEvent(dAtA, i, uint64(m.OperatorId))
		i--
		dAtA[i] = 0x38
	}
	if m.GroupId != 0 {
		i = encodeVarintOnebotEvent(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x30
	}
	if len(m.SubType) > 0 {
		i -= len(m.SubType)
		copy(dAtA[i:], m.SubType)
		i = encodeVarintOnebotEvent(dAtA, i, uint64(len(m.SubType)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.NoticeType) > 0 {
		i -= len(m.NoticeType)
		copy(dAtA[i:], m.NoticeType)
		i = encodeVarintOnebotEvent(dAtA, i, uint64(len(m.NoticeType)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PostType) > 0 {
		i -= len(m.PostType)
		copy(dAtA[i:], m.PostType)
		i = encodeVarintOnebotEvent(dAtA, i, uint64(len(m.PostType)))
		i--
		dAtA[i] = 0x1a
	}
	if m.SelfId != 0 {
		i = encodeVarintOnebotEvent(dAtA, i, uint64(m.SelfId))
		i--
		dAtA[i] = 0x10
	}
	if m.Time != 0 {
		i = encodeVarintOnebotEvent(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FriendAddNoticeEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FriendAddNoticeEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FriendAddNoticeEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Extra) > 0 {
		for k := range m.Extra {
			v := m.Extra[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintOnebotEvent(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintOnebotEvent(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintOnebotEvent(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xf
			i--
			dAtA[i] = 0xfa
		}
	}
	if m.UserId != 0 {
		i = encodeVarintOnebotEvent(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x28
	}
	if len(m.NoticeType) > 0 {
		i -= len(m.NoticeType)
		copy(dAtA[i:], m.NoticeType)
		i = encodeVarintOnebotEvent(dAtA, i, uint64(len(m.NoticeType)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PostType) > 0 {
		i -= len(m.PostType)
		copy(dAtA[i:], m.PostType)
		i = encodeVarintOnebotEvent(dAtA, i, uint64(len(m.PostType)))
		i--
		dAtA[i] = 0x1a
	}
	if m.SelfId != 0 {
		i = encodeVarintOnebotEvent(dAtA, i, uint64(m.SelfId))
		i--
		dAtA[i] = 0x10
	}
	if m.Time != 0 {
		i = encodeVarintOnebotEvent(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GroupRecallNoticeEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupRecallNoticeEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupRecallNoticeEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Extra) > 0 {
		for k := range m.Extra {
			v := m.Extra[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintOnebotEvent(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintOnebotEvent(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintOnebotEvent(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xf
			i--
			dAtA[i] = 0xfa
		}
	}
	if m.MessageId != 0 {
		i = encodeVarintOnebotEvent(dAtA, i, uint64(m.MessageId))
		i--
		dAtA[i] = 0x40
	}
	if m.OperatorId != 0 {
		i = encodeVarintOnebotEvent(dAtA, i, uint64(m.OperatorId))
		i--
		dAtA[i] = 0x38
	}
	if m.UserId != 0 {
		i = encodeVarintOnebotEvent(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x30
	}
	if m.GroupId != 0 {
		i = encodeVarintOnebotEvent(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x28
	}
	if len(m.NoticeType) > 0 {
		i -= len(m.NoticeType)
		copy(dAtA[i:], m.NoticeType)
		i = encodeVarintOnebotEvent(dAtA, i, uint64(len(m.NoticeType)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PostType) > 0 {
		i -= len(m.PostType)
		copy(dAtA[i:], m.PostType)
		i = encodeVarintOnebotEvent(dAtA, i, uint64(len(m.PostType)))
		i--
		dAtA[i] = 0x1a
	}
	if m.SelfId != 0 {
		i = encodeVarintOnebotEvent(dAtA, i, uint64(m.SelfId))
		i--
		dAtA[i] = 0x10
	}
	if m.Time != 0 {
		i = encodeVarintOnebotEvent(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FriendRecallNoticeEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FriendRecallNoticeEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FriendRecallNoticeEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Extra) > 0 {
		for k := range m.Extra {
			v := m.Extra[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintOnebotEvent(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintOnebotEvent(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintOnebotEvent(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xf
			i--
			dAtA[i] = 0xfa
		}
	}
	if m.MessageId != 0 {
		i = encodeVarintOnebotEvent(dAtA, i, uint64(m.MessageId))
		i--
		dAtA[i] = 0x30
	}
	if m.UserId != 0 {
		i = encodeVarintOnebotEvent(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x28
	}
	if len(m.NoticeType) > 0 {
		i -= len(m.NoticeType)
		copy(dAtA[i:], m.NoticeType)
		i = encodeVarintOnebotEvent(dAtA, i, uint64(len(m.NoticeType)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PostType) > 0 {
		i -= len(m.PostType)
		copy(dAtA[i:], m.PostType)
		i = encodeVarintOnebotEvent(dAtA, i, uint64(len(m.PostType)))
		i--
		dAtA[i] = 0x1a
	}
	if m.SelfId != 0 {
		i = encodeVarintOnebotEvent(dAtA, i, uint64(m.SelfId))
		i--
		dAtA[i] = 0x10
	}
	if m.Time != 0 {
		i = encodeVarintOnebotEvent(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *FriendRequestEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FriendRequestEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FriendRequestEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Extra) > 0 {
		for k := range m.Extra {
			v := m.Extra[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintOnebotEvent(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintOnebotEvent(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintOnebotEvent(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xf
			i--
			dAtA[i] = 0xfa
		}
	}
	if len(m.Flag) > 0 {
		i -= len(m.Flag)
		copy(dAtA[i:], m.Flag)
		i = encodeVarintOnebotEvent(dAtA, i, uint64(len(m.Flag)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Comment) > 0 {
		i -= len(m.Comment)
		copy(dAtA[i:], m.Comment)
		i = encodeVarintOnebotEvent(dAtA, i, uint64(len(m.Comment)))
		i--
		dAtA[i] = 0x32
	}
	if m.UserId != 0 {
		i = encodeVarintOnebotEvent(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x28
	}
	if len(m.RequestType) > 0 {
		i -= len(m.RequestType)
		copy(dAtA[i:], m.RequestType)
		i = encodeVarintOnebotEvent(dAtA, i, uint64(len(m.RequestType)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PostType) > 0 {
		i -= len(m.PostType)
		copy(dAtA[i:], m.PostType)
		i = encodeVarintOnebotEvent(dAtA, i, uint64(len(m.PostType)))
		i--
		dAtA[i] = 0x1a
	}
	if m.SelfId != 0 {
		i = encodeVarintOnebotEvent(dAtA, i, uint64(m.SelfId))
		i--
		dAtA[i] = 0x10
	}
	if m.Time != 0 {
		i = encodeVarintOnebotEvent(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GroupRequestEvent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GroupRequestEvent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GroupRequestEvent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Extra) > 0 {
		for k := range m.Extra {
			v := m.Extra[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintOnebotEvent(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintOnebotEvent(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintOnebotEvent(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xf
			i--
			dAtA[i] = 0xfa
		}
	}
	if len(m.Flag) > 0 {
		i -= len(m.Flag)
		copy(dAtA[i:], m.Flag)
		i = encodeVarintOnebotEvent(dAtA, i, uint64(len(m.Flag)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Comment) > 0 {
		i -= len(m.Comment)
		copy(dAtA[i:], m.Comment)
		i = encodeVarintOnebotEvent(dAtA, i, uint64(len(m.Comment)))
		i--
		dAtA[i] = 0x42
	}
	if m.UserId != 0 {
		i = encodeVarintOnebotEvent(dAtA, i, uint64(m.UserId))
		i--
		dAtA[i] = 0x38
	}
	if m.GroupId != 0 {
		i = encodeVarintOnebotEvent(dAtA, i, uint64(m.GroupId))
		i--
		dAtA[i] = 0x30
	}
	if len(m.SubType) > 0 {
		i -= len(m.SubType)
		copy(dAtA[i:], m.SubType)
		i = encodeVarintOnebotEvent(dAtA, i, uint64(len(m.SubType)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.RequestType) > 0 {
		i -= len(m.RequestType)
		copy(dAtA[i:], m.RequestType)
		i = encodeVarintOnebotEvent(dAtA, i, uint64(len(m.RequestType)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.PostType) > 0 {
		i -= len(m.PostType)
		copy(dAtA[i:], m.PostType)
		i = encodeVarintOnebotEvent(dAtA, i, uint64(len(m.PostType)))
		i--
		dAtA[i] = 0x1a
	}
	if m.SelfId != 0 {
		i = encodeVarintOnebotEvent(dAtA, i, uint64(m.SelfId))
		i--
		dAtA[i] = 0x10
	}
	if m.Time != 0 {
		i = encodeVarintOnebotEvent(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintOnebotEvent(dAtA []byte, offset int, v uint64) int {
	offset -= sovOnebotEvent(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PrivateMessageEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Time != 0 {
		n += 1 + sovOnebotEvent(uint64(m.Time))
	}
	if m.SelfId != 0 {
		n += 1 + sovOnebotEvent(uint64(m.SelfId))
	}
	l = len(m.PostType)
	if l > 0 {
		n += 1 + l + sovOnebotEvent(uint64(l))
	}
	l = len(m.MessageType)
	if l > 0 {
		n += 1 + l + sovOnebotEvent(uint64(l))
	}
	l = len(m.SubType)
	if l > 0 {
		n += 1 + l + sovOnebotEvent(uint64(l))
	}
	if m.MessageId != 0 {
		n += 1 + sovOnebotEvent(uint64(m.MessageId))
	}
	if m.UserId != 0 {
		n += 1 + sovOnebotEvent(uint64(m.UserId))
	}
	if len(m.Message) > 0 {
		for _, e := range m.Message {
			l = e.Size()
			n += 1 + l + sovOnebotEvent(uint64(l))
		}
	}
	l = len(m.RawMessage)
	if l > 0 {
		n += 1 + l + sovOnebotEvent(uint64(l))
	}
	if m.Font != 0 {
		n += 1 + sovOnebotEvent(uint64(m.Font))
	}
	if m.Sender != nil {
		l = m.Sender.Size()
		n += 1 + l + sovOnebotEvent(uint64(l))
	}
	if len(m.Extra) > 0 {
		for k, v := range m.Extra {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovOnebotEvent(uint64(len(k))) + 1 + len(v) + sovOnebotEvent(uint64(len(v)))
			n += mapEntrySize + 2 + sovOnebotEvent(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PrivateMessageEvent_Sender) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovOnebotEvent(uint64(m.UserId))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovOnebotEvent(uint64(l))
	}
	l = len(m.Sex)
	if l > 0 {
		n += 1 + l + sovOnebotEvent(uint64(l))
	}
	if m.Age != 0 {
		n += 1 + sovOnebotEvent(uint64(m.Age))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GroupMessageEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Time != 0 {
		n += 1 + sovOnebotEvent(uint64(m.Time))
	}
	if m.SelfId != 0 {
		n += 1 + sovOnebotEvent(uint64(m.SelfId))
	}
	l = len(m.PostType)
	if l > 0 {
		n += 1 + l + sovOnebotEvent(uint64(l))
	}
	l = len(m.MessageType)
	if l > 0 {
		n += 1 + l + sovOnebotEvent(uint64(l))
	}
	l = len(m.SubType)
	if l > 0 {
		n += 1 + l + sovOnebotEvent(uint64(l))
	}
	if m.MessageId != 0 {
		n += 1 + sovOnebotEvent(uint64(m.MessageId))
	}
	if m.GroupId != 0 {
		n += 1 + sovOnebotEvent(uint64(m.GroupId))
	}
	if m.UserId != 0 {
		n += 1 + sovOnebotEvent(uint64(m.UserId))
	}
	if m.Anonymous != nil {
		l = m.Anonymous.Size()
		n += 1 + l + sovOnebotEvent(uint64(l))
	}
	if len(m.Message) > 0 {
		for _, e := range m.Message {
			l = e.Size()
			n += 1 + l + sovOnebotEvent(uint64(l))
		}
	}
	l = len(m.RawMessage)
	if l > 0 {
		n += 1 + l + sovOnebotEvent(uint64(l))
	}
	if m.Font != 0 {
		n += 1 + sovOnebotEvent(uint64(m.Font))
	}
	if m.Sender != nil {
		l = m.Sender.Size()
		n += 1 + l + sovOnebotEvent(uint64(l))
	}
	if len(m.Extra) > 0 {
		for k, v := range m.Extra {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovOnebotEvent(uint64(len(k))) + 1 + len(v) + sovOnebotEvent(uint64(len(v)))
			n += mapEntrySize + 2 + sovOnebotEvent(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GroupMessageEvent_Anonymous) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovOnebotEvent(uint64(m.Id))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovOnebotEvent(uint64(l))
	}
	l = len(m.Flag)
	if l > 0 {
		n += 1 + l + sovOnebotEvent(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GroupMessageEvent_Sender) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.UserId != 0 {
		n += 1 + sovOnebotEvent(uint64(m.UserId))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovOnebotEvent(uint64(l))
	}
	l = len(m.Card)
	if l > 0 {
		n += 1 + l + sovOnebotEvent(uint64(l))
	}
	l = len(m.Sex)
	if l > 0 {
		n += 1 + l + sovOnebotEvent(uint64(l))
	}
	if m.Age != 0 {
		n += 1 + sovOnebotEvent(uint64(m.Age))
	}
	l = len(m.Area)
	if l > 0 {
		n += 1 + l + sovOnebotEvent(uint64(l))
	}
	l = len(m.Level)
	if l > 0 {
		n += 1 + l + sovOnebotEvent(uint64(l))
	}
	l = len(m.Role)
	if l > 0 {
		n += 1 + l + sovOnebotEvent(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovOnebotEvent(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GroupUploadNoticeEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Time != 0 {
		n += 1 + sovOnebotEvent(uint64(m.Time))
	}
	if m.SelfId != 0 {
		n += 1 + sovOnebotEvent(uint64(m.SelfId))
	}
	l = len(m.PostType)
	if l > 0 {
		n += 1 + l + sovOnebotEvent(uint64(l))
	}
	l = len(m.NoticeType)
	if l > 0 {
		n += 1 + l + sovOnebotEvent(uint64(l))
	}
	if m.GroupId != 0 {
		n += 1 + sovOnebotEvent(uint64(m.GroupId))
	}
	if m.UserId != 0 {
		n += 1 + sovOnebotEvent(uint64(m.UserId))
	}
	if m.File != nil {
		l = m.File.Size()
		n += 1 + l + sovOnebotEvent(uint64(l))
	}
	if len(m.Extra) > 0 {
		for k, v := range m.Extra {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovOnebotEvent(uint64(len(k))) + 1 + len(v) + sovOnebotEvent(uint64(len(v)))
			n += mapEntrySize + 2 + sovOnebotEvent(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GroupUploadNoticeEvent_File) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovOnebotEvent(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovOnebotEvent(uint64(l))
	}
	if m.Size_ != 0 {
		n += 1 + sovOnebotEvent(uint64(m.Size_))
	}
	if m.Busid != 0 {
		n += 1 + sovOnebotEvent(uint64(m.Busid))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovOnebotEvent(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GroupAdminNoticeEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Time != 0 {
		n += 1 + sovOnebotEvent(uint64(m.Time))
	}
	if m.SelfId != 0 {
		n += 1 + sovOnebotEvent(uint64(m.SelfId))
	}
	l = len(m.PostType)
	if l > 0 {
		n += 1 + l + sovOnebotEvent(uint64(l))
	}
	l = len(m.NoticeType)
	if l > 0 {
		n += 1 + l + sovOnebotEvent(uint64(l))
	}
	l = len(m.SubType)
	if l > 0 {
		n += 1 + l + sovOnebotEvent(uint64(l))
	}
	if m.GroupId != 0 {
		n += 1 + sovOnebotEvent(uint64(m.GroupId))
	}
	if m.UserId != 0 {
		n += 1 + sovOnebotEvent(uint64(m.UserId))
	}
	if len(m.Extra) > 0 {
		for k, v := range m.Extra {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovOnebotEvent(uint64(len(k))) + 1 + len(v) + sovOnebotEvent(uint64(len(v)))
			n += mapEntrySize + 2 + sovOnebotEvent(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GroupDecreaseNoticeEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Time != 0 {
		n += 1 + sovOnebotEvent(uint64(m.Time))
	}
	if m.SelfId != 0 {
		n += 1 + sovOnebotEvent(uint64(m.SelfId))
	}
	l = len(m.PostType)
	if l > 0 {
		n += 1 + l + sovOnebotEvent(uint64(l))
	}
	l = len(m.NoticeType)
	if l > 0 {
		n += 1 + l + sovOnebotEvent(uint64(l))
	}
	l = len(m.SubType)
	if l > 0 {
		n += 1 + l + sovOnebotEvent(uint64(l))
	}
	if m.GroupId != 0 {
		n += 1 + sovOnebotEvent(uint64(m.GroupId))
	}
	if m.OperatorId != 0 {
		n += 1 + sovOnebotEvent(uint64(m.OperatorId))
	}
	if m.UserId != 0 {
		n += 1 + sovOnebotEvent(uint64(m.UserId))
	}
	if len(m.Extra) > 0 {
		for k, v := range m.Extra {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovOnebotEvent(uint64(len(k))) + 1 + len(v) + sovOnebotEvent(uint64(len(v)))
			n += mapEntrySize + 2 + sovOnebotEvent(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GroupIncreaseNoticeEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Time != 0 {
		n += 1 + sovOnebotEvent(uint64(m.Time))
	}
	if m.SelfId != 0 {
		n += 1 + sovOnebotEvent(uint64(m.SelfId))
	}
	l = len(m.PostType)
	if l > 0 {
		n += 1 + l + sovOnebotEvent(uint64(l))
	}
	l = len(m.NoticeType)
	if l > 0 {
		n += 1 + l + sovOnebotEvent(uint64(l))
	}
	l = len(m.SubType)
	if l > 0 {
		n += 1 + l + sovOnebotEvent(uint64(l))
	}
	if m.GroupId != 0 {
		n += 1 + sovOnebotEvent(uint64(m.GroupId))
	}
	if m.OperatorId != 0 {
		n += 1 + sovOnebotEvent(uint64(m.OperatorId))
	}
	if m.UserId != 0 {
		n += 1 + sovOnebotEvent(uint64(m.UserId))
	}
	if len(m.Extra) > 0 {
		for k, v := range m.Extra {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovOnebotEvent(uint64(len(k))) + 1 + len(v) + sovOnebotEvent(uint64(len(v)))
			n += mapEntrySize + 2 + sovOnebotEvent(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GroupBanNoticeEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Time != 0 {
		n += 1 + sovOnebotEvent(uint64(m.Time))
	}
	if m.SelfId != 0 {
		n += 1 + sovOnebotEvent(uint64(m.SelfId))
	}
	l = len(m.PostType)
	if l > 0 {
		n += 1 + l + sovOnebotEvent(uint64(l))
	}
	l = len(m.NoticeType)
	if l > 0 {
		n += 1 + l + sovOnebotEvent(uint64(l))
	}
	l = len(m.SubType)
	if l > 0 {
		n += 1 + l + sovOnebotEvent(uint64(l))
	}
	if m.GroupId != 0 {
		n += 1 + sovOnebotEvent(uint64(m.GroupId))
	}
	if m.OperatorId != 0 {
		n += 1 + sovOnebotEvent(uint64(m.OperatorId))
	}
	if m.UserId != 0 {
		n += 1 + sovOnebotEvent(uint64(m.UserId))
	}
	if m.Duration != 0 {
		n += 1 + sovOnebotEvent(uint64(m.Duration))
	}
	if len(m.Extra) > 0 {
		for k, v := range m.Extra {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovOnebotEvent(uint64(len(k))) + 1 + len(v) + sovOnebotEvent(uint64(len(v)))
			n += mapEntrySize + 2 + sovOnebotEvent(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FriendAddNoticeEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Time != 0 {
		n += 1 + sovOnebotEvent(uint64(m.Time))
	}
	if m.SelfId != 0 {
		n += 1 + sovOnebotEvent(uint64(m.SelfId))
	}
	l = len(m.PostType)
	if l > 0 {
		n += 1 + l + sovOnebotEvent(uint64(l))
	}
	l = len(m.NoticeType)
	if l > 0 {
		n += 1 + l + sovOnebotEvent(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovOnebotEvent(uint64(m.UserId))
	}
	if len(m.Extra) > 0 {
		for k, v := range m.Extra {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovOnebotEvent(uint64(len(k))) + 1 + len(v) + sovOnebotEvent(uint64(len(v)))
			n += mapEntrySize + 2 + sovOnebotEvent(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GroupRecallNoticeEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Time != 0 {
		n += 1 + sovOnebotEvent(uint64(m.Time))
	}
	if m.SelfId != 0 {
		n += 1 + sovOnebotEvent(uint64(m.SelfId))
	}
	l = len(m.PostType)
	if l > 0 {
		n += 1 + l + sovOnebotEvent(uint64(l))
	}
	l = len(m.NoticeType)
	if l > 0 {
		n += 1 + l + sovOnebotEvent(uint64(l))
	}
	if m.GroupId != 0 {
		n += 1 + sovOnebotEvent(uint64(m.GroupId))
	}
	if m.UserId != 0 {
		n += 1 + sovOnebotEvent(uint64(m.UserId))
	}
	if m.OperatorId != 0 {
		n += 1 + sovOnebotEvent(uint64(m.OperatorId))
	}
	if m.MessageId != 0 {
		n += 1 + sovOnebotEvent(uint64(m.MessageId))
	}
	if len(m.Extra) > 0 {
		for k, v := range m.Extra {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovOnebotEvent(uint64(len(k))) + 1 + len(v) + sovOnebotEvent(uint64(len(v)))
			n += mapEntrySize + 2 + sovOnebotEvent(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FriendRecallNoticeEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Time != 0 {
		n += 1 + sovOnebotEvent(uint64(m.Time))
	}
	if m.SelfId != 0 {
		n += 1 + sovOnebotEvent(uint64(m.SelfId))
	}
	l = len(m.PostType)
	if l > 0 {
		n += 1 + l + sovOnebotEvent(uint64(l))
	}
	l = len(m.NoticeType)
	if l > 0 {
		n += 1 + l + sovOnebotEvent(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovOnebotEvent(uint64(m.UserId))
	}
	if m.MessageId != 0 {
		n += 1 + sovOnebotEvent(uint64(m.MessageId))
	}
	if len(m.Extra) > 0 {
		for k, v := range m.Extra {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovOnebotEvent(uint64(len(k))) + 1 + len(v) + sovOnebotEvent(uint64(len(v)))
			n += mapEntrySize + 2 + sovOnebotEvent(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *FriendRequestEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Time != 0 {
		n += 1 + sovOnebotEvent(uint64(m.Time))
	}
	if m.SelfId != 0 {
		n += 1 + sovOnebotEvent(uint64(m.SelfId))
	}
	l = len(m.PostType)
	if l > 0 {
		n += 1 + l + sovOnebotEvent(uint64(l))
	}
	l = len(m.RequestType)
	if l > 0 {
		n += 1 + l + sovOnebotEvent(uint64(l))
	}
	if m.UserId != 0 {
		n += 1 + sovOnebotEvent(uint64(m.UserId))
	}
	l = len(m.Comment)
	if l > 0 {
		n += 1 + l + sovOnebotEvent(uint64(l))
	}
	l = len(m.Flag)
	if l > 0 {
		n += 1 + l + sovOnebotEvent(uint64(l))
	}
	if len(m.Extra) > 0 {
		for k, v := range m.Extra {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovOnebotEvent(uint64(len(k))) + 1 + len(v) + sovOnebotEvent(uint64(len(v)))
			n += mapEntrySize + 2 + sovOnebotEvent(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GroupRequestEvent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Time != 0 {
		n += 1 + sovOnebotEvent(uint64(m.Time))
	}
	if m.SelfId != 0 {
		n += 1 + sovOnebotEvent(uint64(m.SelfId))
	}
	l = len(m.PostType)
	if l > 0 {
		n += 1 + l + sovOnebotEvent(uint64(l))
	}
	l = len(m.RequestType)
	if l > 0 {
		n += 1 + l + sovOnebotEvent(uint64(l))
	}
	l = len(m.SubType)
	if l > 0 {
		n += 1 + l + sovOnebotEvent(uint64(l))
	}
	if m.GroupId != 0 {
		n += 1 + sovOnebotEvent(uint64(m.GroupId))
	}
	if m.UserId != 0 {
		n += 1 + sovOnebotEvent(uint64(m.UserId))
	}
	l = len(m.Comment)
	if l > 0 {
		n += 1 + l + sovOnebotEvent(uint64(l))
	}
	l = len(m.Flag)
	if l > 0 {
		n += 1 + l + sovOnebotEvent(uint64(l))
	}
	if len(m.Extra) > 0 {
		for k, v := range m.Extra {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovOnebotEvent(uint64(len(k))) + 1 + len(v) + sovOnebotEvent(uint64(len(v)))
			n += mapEntrySize + 2 + sovOnebotEvent(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovOnebotEvent(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOnebotEvent(x uint64) (n int) {
	return sovOnebotEvent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PrivateMessageEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOnebotEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrivateMessageEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrivateMessageEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfId", wireType)
			}
			m.SelfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PostType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			m.MessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = append(m.Message, &Message{})
			if err := m.Message[len(m.Message)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RawMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Font", wireType)
			}
			m.Font = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Font |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sender == nil {
				m.Sender = &PrivateMessageEvent_Sender{}
			}
			if err := m.Sender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 255:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Extra == nil {
				m.Extra = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowOnebotEvent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOnebotEvent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthOnebotEvent
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthOnebotEvent
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOnebotEvent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthOnebotEvent
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthOnebotEvent
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipOnebotEvent(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthOnebotEvent
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Extra[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOnebotEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrivateMessageEvent_Sender) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOnebotEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Sender: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Sender: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Age", wireType)
			}
			m.Age = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Age |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOnebotEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupMessageEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOnebotEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupMessageEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupMessageEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfId", wireType)
			}
			m.SelfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PostType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			m.MessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Anonymous", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Anonymous == nil {
				m.Anonymous = &GroupMessageEvent_Anonymous{}
			}
			if err := m.Anonymous.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = append(m.Message, &Message{})
			if err := m.Message[len(m.Message)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RawMessage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RawMessage = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Font", wireType)
			}
			m.Font = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Font |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sender == nil {
				m.Sender = &GroupMessageEvent_Sender{}
			}
			if err := m.Sender.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 255:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Extra == nil {
				m.Extra = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowOnebotEvent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOnebotEvent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthOnebotEvent
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthOnebotEvent
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOnebotEvent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthOnebotEvent
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthOnebotEvent
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipOnebotEvent(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthOnebotEvent
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Extra[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOnebotEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupMessageEvent_Anonymous) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOnebotEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Anonymous: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Anonymous: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Flag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOnebotEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupMessageEvent_Sender) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOnebotEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Sender: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Sender: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Card", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Card = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Age", wireType)
			}
			m.Age = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Age |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Area", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Area = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Level = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Role = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOnebotEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupUploadNoticeEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOnebotEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupUploadNoticeEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupUploadNoticeEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfId", wireType)
			}
			m.SelfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PostType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoticeType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NoticeType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field File", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.File == nil {
				m.File = &GroupUploadNoticeEvent_File{}
			}
			if err := m.File.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 255:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Extra == nil {
				m.Extra = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowOnebotEvent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOnebotEvent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthOnebotEvent
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthOnebotEvent
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOnebotEvent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthOnebotEvent
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthOnebotEvent
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipOnebotEvent(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthOnebotEvent
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Extra[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOnebotEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupUploadNoticeEvent_File) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOnebotEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: File: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: File: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Busid", wireType)
			}
			m.Busid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Busid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOnebotEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupAdminNoticeEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOnebotEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupAdminNoticeEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupAdminNoticeEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfId", wireType)
			}
			m.SelfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PostType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoticeType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NoticeType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 255:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Extra == nil {
				m.Extra = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowOnebotEvent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOnebotEvent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthOnebotEvent
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthOnebotEvent
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOnebotEvent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthOnebotEvent
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthOnebotEvent
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipOnebotEvent(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthOnebotEvent
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Extra[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOnebotEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupDecreaseNoticeEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOnebotEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupDecreaseNoticeEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupDecreaseNoticeEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfId", wireType)
			}
			m.SelfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PostType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoticeType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NoticeType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorId", wireType)
			}
			m.OperatorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperatorId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 255:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Extra == nil {
				m.Extra = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowOnebotEvent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOnebotEvent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthOnebotEvent
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthOnebotEvent
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOnebotEvent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthOnebotEvent
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthOnebotEvent
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipOnebotEvent(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthOnebotEvent
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Extra[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOnebotEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupIncreaseNoticeEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOnebotEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupIncreaseNoticeEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupIncreaseNoticeEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfId", wireType)
			}
			m.SelfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PostType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoticeType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NoticeType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorId", wireType)
			}
			m.OperatorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperatorId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 255:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Extra == nil {
				m.Extra = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowOnebotEvent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOnebotEvent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthOnebotEvent
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthOnebotEvent
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOnebotEvent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthOnebotEvent
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthOnebotEvent
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipOnebotEvent(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthOnebotEvent
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Extra[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOnebotEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupBanNoticeEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOnebotEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupBanNoticeEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupBanNoticeEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfId", wireType)
			}
			m.SelfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PostType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoticeType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NoticeType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorId", wireType)
			}
			m.OperatorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperatorId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Duration", wireType)
			}
			m.Duration = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Duration |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 255:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Extra == nil {
				m.Extra = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowOnebotEvent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOnebotEvent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthOnebotEvent
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthOnebotEvent
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOnebotEvent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthOnebotEvent
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthOnebotEvent
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipOnebotEvent(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthOnebotEvent
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Extra[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOnebotEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FriendAddNoticeEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOnebotEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FriendAddNoticeEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FriendAddNoticeEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfId", wireType)
			}
			m.SelfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PostType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoticeType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NoticeType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 255:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Extra == nil {
				m.Extra = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowOnebotEvent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOnebotEvent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthOnebotEvent
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthOnebotEvent
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOnebotEvent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthOnebotEvent
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthOnebotEvent
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipOnebotEvent(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthOnebotEvent
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Extra[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOnebotEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupRecallNoticeEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOnebotEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupRecallNoticeEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupRecallNoticeEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfId", wireType)
			}
			m.SelfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PostType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoticeType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NoticeType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorId", wireType)
			}
			m.OperatorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OperatorId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			m.MessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 255:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Extra == nil {
				m.Extra = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowOnebotEvent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOnebotEvent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthOnebotEvent
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthOnebotEvent
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOnebotEvent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthOnebotEvent
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthOnebotEvent
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipOnebotEvent(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthOnebotEvent
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Extra[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOnebotEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FriendRecallNoticeEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOnebotEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FriendRecallNoticeEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FriendRecallNoticeEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfId", wireType)
			}
			m.SelfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PostType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NoticeType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NoticeType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			m.MessageId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 255:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Extra == nil {
				m.Extra = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowOnebotEvent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOnebotEvent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthOnebotEvent
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthOnebotEvent
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOnebotEvent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthOnebotEvent
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthOnebotEvent
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipOnebotEvent(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthOnebotEvent
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Extra[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOnebotEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FriendRequestEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOnebotEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FriendRequestEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FriendRequestEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfId", wireType)
			}
			m.SelfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PostType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Flag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 255:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Extra == nil {
				m.Extra = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowOnebotEvent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOnebotEvent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthOnebotEvent
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthOnebotEvent
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOnebotEvent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthOnebotEvent
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthOnebotEvent
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipOnebotEvent(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthOnebotEvent
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Extra[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOnebotEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GroupRequestEvent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOnebotEvent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GroupRequestEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GroupRequestEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SelfId", wireType)
			}
			m.SelfId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SelfId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PostType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PostType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RequestType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupId", wireType)
			}
			m.GroupId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GroupId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			m.UserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UserId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flag", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Flag = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 255:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extra", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Extra == nil {
				m.Extra = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowOnebotEvent
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOnebotEvent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthOnebotEvent
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthOnebotEvent
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowOnebotEvent
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthOnebotEvent
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthOnebotEvent
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipOnebotEvent(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthOnebotEvent
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Extra[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipOnebotEvent(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOnebotEvent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOnebotEvent(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOnebotEvent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOnebotEvent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOnebotEvent
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOnebotEvent
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOnebotEvent
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOnebotEvent        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOnebotEvent          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOnebotEvent = fmt.Errorf("proto: unexpected end of group")
)
